# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  branches:
    include:
    - dev
    - qa
    - prod

variables:
  solution: 'Pocs.HealthCheck/Pocs.HealthCheck.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'


stages:
- ${{ if contains(variables['Build.SourceBranch'], 'dev') }}:  

  - template: Templates\Stages\StageAppSec.yaml

  #- template: Templates\Stages\StageFoundation.yaml

  - stage: BuildDev
    displayName: Build-Dev
    jobs:
    - job: Build
      pool:
        vmImage: 'windows-latest'
      steps:
      - task: DotNetCoreCLI@2
        displayName: 'dotnet build'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: 'HealthCheck/Pocs.HealthCheck/Pocs.HealthCheck.csproj'
          arguments: '/p:Configuration=Release --output=$(Agent.BuildDirectory)/Pocs.HealthCheck'
          zipAfterPublish: false
          modifyOutputPath: false
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'HealthCheck/'
          Contents: 'Pocs.HealthCheck/*.yaml'
          TargetFolder: '$(Agent.BuildDirectory)/'
          #CleanTargetFolder: true
          OverWrite: true
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'HealthCheck/'
          Contents: 'Pocs.HealthCheck/Dockerfile'
          TargetFolder: '$(Agent.BuildDirectory)/'
          OverWrite: true
      - task: CopyFiles@2
        inputs:
          SourceFolder: 'HealthCheck/Pocs.HealthCheck/hdiv/'
          Contents: '**'
          TargetFolder: '$(Agent.BuildDirectory)/Pocs.HealthCheck/hdiv'
          OverWrite: true

      - task: HdivCheckTask@0
        inputs:
          taskProfile: 'Console'
          HdivConsoleService: 'HDIV-RASP'
          application: 'Rasp-Pipe'
          startDate: '2021/05/11 15:10:22'

      - script: 'sed -i ''s/{{TAG_VERSION}}/$(Build.BuildId)/g'' $(Agent.BuildDirectory)/Pocs.HealthCheck/**.yaml'
        displayName: 'Command Line Script'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          PathtoPublish: '$(Agent.BuildDirectory)/Pocs.HealthCheck'
          ArtifactName: 'Pocs.HealthCheck'
          publishLocation: 'Container'
        condition: succeededOrFailed()

  - stage: BuildImage
    displayName: Build-img
    dependsOn: BuildDev
    jobs:
    - job: Build
      pool:
        vmImage: ubuntu-16.04
      steps:
      #- checkout: self
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'Pocs.HealthCheck'
          downloadPath: '$(System.ArtifactsDirectory)'
      - task: Docker@2
        inputs:
          containerRegistry: 'pocraspacr'
          command: 'login'
      - task: Docker@2
        inputs:
          containerRegistry: 'pocraspacr'
          repository: 'rasp'
          command: 'buildAndPush'
          Dockerfile: '$(System.ArtifactsDirectory)/Pocs.HealthCheck/Dockerfile'
          tags: |
            $(Build.BuildId)
            latest

  - stage: DeployAKS
    dependsOn: BuildImage
    jobs:
    - deployment: release_dev
      ${{ if contains(variables['Build.SourceBranch'], 'dev') }}:
        condition: and(succeeded(), true)
      ${{ if contains(variables['Build.SourceBranch'], 'hotfix') }}:  
        condition: false
      ${{ if contains(variables['Build.SourceBranch'], 'prod') }}:  
        condition: false
      ${{ if contains(variables['Build.SourceBranch'], 'qa') }}:  
        condition: false
      variables: 
        - name: ENVIRONMENT
          value: 'Development'
        - name: 'azureSubscription'
          value: 'Assinatura do Visual Studio Enterprise â€“ MPN(a45048d3-69a8-4e2d-89a9-4585441c96f6)'

      pool:
        vmImage: ubuntu-16.04
      environment: dev
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - script: echo running UnitTest
            - task: DownloadBuildArtifacts@0
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'Pocs.HealthCheck'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: Kubernetes@1
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'AKSRASP'
                namespace: 'pocrasp'
                command: 'apply'
                useConfigurationFile: true
                configuration: '$(System.ArtifactsDirectory)/Pocs.HealthCheck/BuildImg-Container.yaml'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
